> module S20130530 where

- ヘッドセット付き
- 様々な圏

- 復習

-- 圏
-- 同型
-- 関手
-- 自然変換
-- 関手と関手の間の関係

-- Sets
-- ありとあらゆる集合とありとあらゆる関数が入っているので大きい.

-- 宇宙
-- Setsの対象(全ての集合)をあつめてUと呼ぶ.
-- U自体も集合じゃん?
-- UはSetsの対象なのか?
-- 入れないよ.
-- Uの要素 = 小さい集合
-- それ以外を大きな集合と呼ぶ
-- Setsは小さい集合

-- Mon
-- Grp
-- ベクトル空間
-- グラフ
-- 実数の集合と連続関数
--- 位相
--- Top
-- 順序集合と単調写像
-- 型の圏
対象 : 型
射 : 関数
射の合成 : 関数合成
Hask

-- コンパイラは関手
-- ドメインというのは領域という意味のものでScottドメインと言う

-- 証明の圏
-- 型の圏と証明の圏

- 圏の圏 Cat
-- 関係の圏

- 離散圏 = 集合

- モノイド
- どの射をとっても合成できるってことのために対象が1個といってるけど対象はどうでもいい

- 前順序集合

- 半順序
-- 前順序に反対称律を追加
-- Scottドメインが半順序の構造を持つ?
- CPO とか ω-CPO : POってのは半順序のこと

-- 全順序
-- 全ての対象間に順序が付けられる.


- 空圏


-- 関手とセットで考えると便利

- 1圏からの関手は対象と同一視できる
- 2圏からの関手は射と同一視できる
- 3圏からの関手は合成可能な射の対と同一視可能

★ 対象や射などの「もの」と関手などの「マッピング」が相互に移り変われるものである

- 空関数
- 0圏から他の圏への関手はただひとつだけある.
  矛盾からは何でも導けるってのと同じように考えていい?→よさげ.

- 圏から圏を作る

-- 積圏
--- 関手圏
-- C^1 = C in Cat
-- 圏の圏の中で同型と読む

- 自由対象

- 自由マグマ = 二分木

- 自由半群 = 長さが1以上の列(と連結)

- 代数を考えて自由○○を考えるとデータ構造が出てくる.
- 自由可換モノイド = マルチセット

- 自由羃等モノイド = 
- 自由羃等可換モノイド = 集合

- 代トポ(代数的位相幾何学)

- 命題論理とベン図のような空間(トポロジー的なもの)と繋がってる.
- 直観主義論理

> class Magma a where
>   magappend :: a -> a -> a
>
> data FreeMagma a = Leaf a | Node (FreeMagma a) (FreeMagma a) deriving Show
>
> foldMapMagma :: Magma b => (a -> b) -> FreeMagma a -> b
> foldMapMagma f (Leaf x) = f x
> foldMapMagma f (Node l r) = foldMapMagma f l `magappend` foldMapMagma f r
> 
> 
> instance Magma String where
>   x `magappend` y = "(" ++ x ++ " " ++ y ++ ")"
>
> instance Magma Int where
>   magappend = (+)
>
